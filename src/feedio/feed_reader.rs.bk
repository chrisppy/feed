// Copyright (c) 2016 Chris Palmer <pennstate5013@gmail.com>
// Use of this source code is governed by the LGPLv3 license that can be
// found in the LICENSE file.

//! Implementation of `FeedReader`.

use feedio::FeedReader;
use quick_xml::{Event, XmlReader};
use rss::{Channel, ChannelBuilder, Category, CategoryBuilder, CloudBuilder, EnclosureBuilder,
          GuidBuilder, ImageBuilder, Item, ItemBuilder, SourceBuilder, TextInputBuilder};
use util;

impl FeedReader {
    /// Construct a new `FeedReader` and return the `Channel`.
    ///
    /// # Examples
    ///
    /// ```
    /// use feed::feedio::FeedReader;
    ///
    /// let feed_reader = FeedReader::new("String");
    /// ```
    pub fn new(feed: &str) -> FeedReader {
        let feed_string = feed.to_owned();
        let mut category_builder = CategoryBuilder::new();
        let mut channel_builder = ChannelBuilder::new();
        let mut guid_builder = GuidBuilder::new();
        let mut image_builder = ImageBuilder::new();
        let mut item_builder = ItemBuilder::new();
        let mut source_builder = SourceBuilder::new();
        let mut text_input_builder = TextInputBuilder::new();

        let mut channel_categories: Vec<Category> = Vec::new();
        let mut channel_skip_days: Vec<String> = Vec::new();
        let mut channel_skip_hours: Vec<i64> = Vec::new();
        let mut items: Vec<Item> = Vec::new();
        let mut item_categories: Vec<Category> = Vec::new();
        let mut element = "channel";
        let mut name = "";

        let reader = XmlReader::from_str(&feed_string).trim_text(true);
        for r in reader {
            match r {
                Ok(Event::Start(ref e)) => {
                    match e.name() {
                        b"image" => {
                            element = "image";
                        }
                        b"textInput" => {
                            element = "textInput";
                        }
                        b"item" => {
                            item_builder = ItemBuilder::new();
                            element = "item";
                        }
                        b"author" => {
                            name = "author";
                        }
                        b"category" => {
                            name = "category";

                            category_builder = CategoryBuilder::new();

                            let domain = util::attribute_to_option_string(e.attributes(), 0);
                            category_builder.domain(domain);
                        }
                        b"cloud" => {
                            let mut cloud_builder = CloudBuilder::new();

                            let domain = util::attribute_to_str(e.attributes(), 0);
                            cloud_builder.domain(domain);

                            let port = util::attribute_to_i64(e.attributes(), 1);
                            cloud_builder.port(port);

                            let path = util::attribute_to_str(e.attributes(), 2);
                            cloud_builder.path(path);

                            let register_procedure = util::attribute_to_str(e.attributes(), 3);
                            cloud_builder.register_procedure(register_procedure);

                            let protocol = util::attribute_to_str(e.attributes(), 4);
                            cloud_builder.protocol(protocol);

                            channel_builder.cloud(Some(cloud_builder.finalize()));
                        }
                        b"comments" => {
                            name = "comments";
                        }
                        b"copyright" => {
                            name = "copyright";
                        }
                        b"day" => {
                            name = "day";
                        }
                        b"description" => {
                            name = "description";
                        }
                        b"docs" => {
                            name = "docs";
                        }
                        b"enclosure" => {
                            let mut enclosure_builder = EnclosureBuilder::new();

                            let url = util::attribute_to_str(e.attributes(), 0);
                            enclosure_builder.url(url);

                            let length = util::attribute_to_i64(e.attributes(), 1);
                            enclosure_builder.length(length);

                            let enclosure_type = util::attribute_to_str(e.attributes(), 2);
                            enclosure_builder.enclosure_type(enclosure_type);

                            item_builder.enclosure(Some(enclosure_builder.finalize()));
                        }
                        b"generator" => {
                            name = "generator";
                        }
                        b"guid" => {
                            name = "guid";

                            guid_builder = GuidBuilder::new();

                            let permalink = util::attribute_to_option_bool(e.attributes(), 0);
                            guid_builder.permalink(permalink);
                        }
                        b"height" => {
                            name = "height";
                        }
                        b"hour" => {
                            name = "hour";
                        }
                        b"language" => {
                            name = "language";
                        }
                        b"lastBuildDate" => {
                            name = "lastBuildDate";
                        }
                        b"link" => {
                            name = "link";
                        }
                        b"managingEditor" => {
                            name = "managingEditor";
                        }
                        b"name" => {
                            name = "name";
                        }
                        b"pubDate" => {
                            name = "pubDate";
                        }
                        b"rating" => {
                            name = "rating";
                        }
                        b"source" => {
                            name = "source";

                            source_builder = SourceBuilder::new();

                            let url = util::attribute_to_str(e.attributes(), 0);
                            source_builder.url(url);
                        }
                        b"title" => {
                            name = "title";
                        }
                        b"ttl" => {
                            name = "ttl";
                        }
                        b"url" => {
                            name = "url";
                        }
                        b"webMaster" => {
                            name = "webMaster";
                        }
                        b"width" => {
                            name = "width";
                        }
                        _ => (),
                    }
                }
                Ok(Event::Text(e)) => {
                    match name {
                        "author" => {
                            let author = util::element_to_option_string(e);
                            item_builder.author(author);
                        }
                        "category" => {
                            let category = util::element_to_string(e);
                            category_builder.category(&category);
                        }
                        "comments" => {
                            let comments = util::element_to_option_string(e);
                            item_builder.comments(comments);
                        }
                        "copyright" => {
                            let copyright = util::element_to_option_string(e);
                            channel_builder.copyright(copyright);
                        }
                        "day" => {
                            let skip_day = util::element_to_string(e);
                            channel_skip_days.push(skip_day);
                        }
                        "description" => {
                            let description = util::element_to_string(e);
                            match element {
                                "channel" => {
                                    channel_builder.description(&description);
                                }
                                "image" => {
                                    image_builder.description(Some(description));
                                }
                                "textInput" => {
                                    text_input_builder.description(&description);
                                }
                                "item" => {
                                    item_builder.description(Some(description));
                                }
                                _ => (),
                            };
                        }
                        "docs" => {
                            let docs = util::element_to_option_string(e);
                            channel_builder.docs(docs);
                        }
                        "generator" => {
                            let generator = util::element_to_option_string(e);
                            channel_builder.generator(generator);
                        }
                        "guid" => {
                            let guid = util::element_to_string(e);
                            guid_builder.guid(&guid);
                        }
                        "height" => {
                            let height = util::element_to_option_i64(e);
                            image_builder.height(height);
                        }
                        "hour" => {
                            let skip_hour = util::element_to_i64(e);
                            channel_skip_hours.push(skip_hour);
                        }
                        "language" => {
                            let language = util::element_to_option_string(e);
                            channel_builder.language(language);
                        }
                        "lastBuildDate" => {
                            let last_build_date = util::element_to_option_string(e);
                            channel_builder.last_build_date(last_build_date);
                        }
                        "link" => {
                            let link = util::element_to_string(e);
                            match element {
                                "channel" => {
                                    channel_builder.link(&link);
                                }
                                "image" => {
                                    image_builder.link(&link);
                                }
                                "textInput" => {
                                    text_input_builder.link(&link);
                                }
                                "item" => {
                                    item_builder.link(Some(link));
                                }
                                _ => (),
                            };
                        }
                        "managingEditor" => {
                            let managing_editor = util::element_to_option_string(e);
                            channel_builder.managing_editor(managing_editor);
                        }
                        "name" => {
                            let name = util::element_to_string(e);
                            text_input_builder.name(&name);
                        }
                        "pubDate" => {
                            let pub_date = util::element_to_option_string(e);
                            match element {
                                "channel" => {
                                    channel_builder.pub_date(pub_date);
                                }
                                "item" => {
                                    item_builder.pub_date(pub_date);
                                }
                                _ => (),
                            };
                        }
                        "rating" => {
                            let rating = util::element_to_option_string(e);
                            channel_builder.rating(rating);
                        }
                        "source" => {
                            let source = util::element_to_string(e);
                            source_builder.source(&source);
                        }
                        "title" => {
                            let title = util::element_to_string(e);
                            match element {
                                "channel" => {
                                    channel_builder.title(&title);
                                }
                                "image" => {
                                    image_builder.title(&title);
                                }
                                "textInput" => {
                                    text_input_builder.title(&title);
                                }
                                "item" => {
                                    item_builder.title(Some(title));
                                }
                                _ => (),
                            };
                        }
                        "ttl" => {
                            let ttl = util::element_to_option_i64(e);
                            channel_builder.ttl(ttl);
                        }
                        "url" => {
                            let url = util::element_to_string(e);
                            image_builder.url(&url);
                        }
                        "webMaster" => {
                            let web_master = util::element_to_option_string(e);
                            channel_builder.web_master(web_master);
                        }
                        "width" => {
                            let width = util::element_to_option_i64(e);
                            image_builder.width(width);
                        }
                        _ => (),
                    };
                }
                Ok(Event::End(ref e)) => {
                    match e.name() {
                        b"category" => {
                            match element {
                                "channel" => {
                                    channel_categories.push(category_builder.finalize());
                                }
                                "item" => {
                                    item_categories.push(category_builder.finalize());
                                }
                                _ => (),
                            };
                        }
                        b"channel" => {
                            channel_builder.categories(Some(channel_categories.clone()));
                            channel_builder.image(Some(image_builder.finalize()));
                            channel_builder.items(Some(items.clone()));
                            channel_builder.skip_days(Some(channel_skip_days.clone()));
                            channel_builder.skip_hours(Some(channel_skip_hours.clone()));
                            channel_builder.text_input(Some(text_input_builder.finalize()));
                        }
                        b"item" => {
                            item_builder.categories(Some(item_categories.clone()));
                            items.push(item_builder.finalize());
                        }
                        b"guid" => {
                            item_builder.guid(Some(guid_builder.finalize()));
                        }
                        b"source" => {
                            item_builder.source(Some(source_builder.finalize()));
                        }
                        _ => (),
                    };
                }
                Err((e, pos)) => panic!("{:?} at position {}", e, pos),
                _ => (),
            }
        }

        FeedReader { channel: channel_builder.finalize() }
    }

    /// Get the `Channel` after parsing.
    ///
    /// # Examples
    ///
    /// ```
    /// use feed::feedio::FeedReader;
    ///
    /// let feed_reader = FeedReader::new("String");
    /// let channel = feed_reader.channel();
    /// ```
    pub fn channel(self) -> Channel {
        self.channel.clone()
    }
}

